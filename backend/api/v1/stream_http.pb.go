// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.29.3
// source: v1/stream.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStreamServiceGetStream = "/stream.v1.StreamService/GetStream"
const OperationStreamServiceListStreams = "/stream.v1.StreamService/ListStreams"
const OperationStreamServiceUpdateStream = "/stream.v1.StreamService/UpdateStream"

type StreamServiceHTTPServer interface {
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamResponse, error)
}

func RegisterStreamServiceHTTPServer(s *http.Server, srv StreamServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/streams", _StreamService_ListStreams0_HTTP_Handler(srv))
	r.GET("/v1/streams/{id}", _StreamService_GetStream0_HTTP_Handler(srv))
	r.PUT("/v1/streams/{id}", _StreamService_UpdateStream0_HTTP_Handler(srv))
}

func _StreamService_ListStreams0_HTTP_Handler(srv StreamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStreamsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStreamServiceListStreams)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStreams(ctx, req.(*ListStreamsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStreamsResponse)
		return ctx.Result(200, reply)
	}
}

func _StreamService_GetStream0_HTTP_Handler(srv StreamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStreamRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStreamServiceGetStream)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStream(ctx, req.(*GetStreamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStreamResponse)
		return ctx.Result(200, reply)
	}
}

func _StreamService_UpdateStream0_HTTP_Handler(srv StreamServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStreamRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStreamServiceUpdateStream)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStream(ctx, req.(*UpdateStreamRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStreamResponse)
		return ctx.Result(200, reply)
	}
}

type StreamServiceHTTPClient interface {
	GetStream(ctx context.Context, req *GetStreamRequest, opts ...http.CallOption) (rsp *GetStreamResponse, err error)
	ListStreams(ctx context.Context, req *ListStreamsRequest, opts ...http.CallOption) (rsp *ListStreamsResponse, err error)
	UpdateStream(ctx context.Context, req *UpdateStreamRequest, opts ...http.CallOption) (rsp *UpdateStreamResponse, err error)
}

type StreamServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewStreamServiceHTTPClient(client *http.Client) StreamServiceHTTPClient {
	return &StreamServiceHTTPClientImpl{client}
}

func (c *StreamServiceHTTPClientImpl) GetStream(ctx context.Context, in *GetStreamRequest, opts ...http.CallOption) (*GetStreamResponse, error) {
	var out GetStreamResponse
	pattern := "/v1/streams/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStreamServiceGetStream))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StreamServiceHTTPClientImpl) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...http.CallOption) (*ListStreamsResponse, error) {
	var out ListStreamsResponse
	pattern := "/v1/streams"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationStreamServiceListStreams))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *StreamServiceHTTPClientImpl) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...http.CallOption) (*UpdateStreamResponse, error) {
	var out UpdateStreamResponse
	pattern := "/v1/streams/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStreamServiceUpdateStream))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
